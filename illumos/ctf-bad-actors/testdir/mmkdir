#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2017 Joyent, Inc.
 */

var path = require('path');
var strsplit = require('strsplit');
var url = require('url');

var bunyan = require('bunyan');
var dashdash = require('dashdash');

var manta = require('../lib');


///--- Functions

/**
 * Create a dashdash options parser for this command
 *
 * @param {String} name: Required. The command name.
 * @returns {Object} A dashdash options parser for the command.
 */
function optionsParser(name) {
    var parser = dashdash.createParser({
        options: manta.DEFAULT_CLI_OPTIONS.concat([
            {
                group: name + ' options'
            },
            {
                names: ['header', 'H'],
                type: 'arrayOfString',
                help: 'HTTP headers to include',
                helpArg: 'HEADER'
            },
            {
                names: ['parents', 'p'],
                type: 'bool',
                help: 'no error if existing, make parent directories as needed'
            },
            {
                names: ['role-tag'],
                type: 'arrayOfString',
                help: 'role tags to apply to the created directory',
                helpArg: 'TAG,TAG...'
            }
        ])
    });

    return (parser);

}


function ifError(err) {
    if (err) {
        console.error('mmkdir: ' + err.toString());
        process.exit(1);
    }
}


/**
 * Handle command-specific options parsing and checking.
 *
 * @param {Object} opts: Required. A parsed options object.
 * @param {Object} parser: Required. A dashdash option parser.
 * @returns {Object} A possibly mutated version of the `opts` input parameter.
 */
function parseCmdOptions(opts, parser) {
    if (opts['role-tag'] && opts['role-tag'].length === 1) {
        /* JSSTYLED */
        opts['role-tag'] = opts['role-tag'][0].split(/\s*,\s*/);
    }

    if (opts._args.length < 1)
        manta.cli_usage(parser, 'path required', 'path...');

    opts.paths = opts._args.map(function (p) {
        ifError(manta.assertPath(p, true));
        return (manta.path(p, true));
    });

    return (opts);
}



///--- Mainline
(function main() {
    var done = 0;
    var name = path.basename(process.argv[1]);
    var log = bunyan.createLogger({
        name: name,
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr
    });
    var parser = optionsParser(name);
    var parseArgs = {
        name: name,
        parser: parser,
        argTypes: ['mdir'],
        parseCmdOptions: parseCmdOptions,
        log: log
    };
    var options = manta.parseOptions(parseArgs);
    var client = manta.createBinClient(options);
    var headers = {
        headers: options.headers || {}
    };

    if (options['role-tag'])
        headers.headers['role-tag'] = options['role-tag'].join(',');

    function cb(err) {
        ifError(err);

        if (++done === options.paths.length)
            client.close();
    }

    options.paths.forEach(function (p) {
        if (options.parents) {
            client.mkdirp(p, headers, cb);
        } else {
            client.mkdir(p, headers, cb);
        }
    });

})();
