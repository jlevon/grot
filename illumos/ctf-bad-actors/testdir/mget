#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2017 Joyent, Inc.
 */

var fs = require('fs');
var path = require('path-platform');
var strsplit = require('strsplit');

var assert = require('assert-plus');
var bunyan = require('bunyan');
var dashdash = require('dashdash');
var progbar = require('progbar');
var vasync = require('vasync');

var manta = require('../lib');


/**
 * Create a dashdash options parser for this command
 *
 * @param {String} name: Required. The command name.
 * @returns {Object} A dashdash options parser for the command.
 */
function optionsParser(name) {
    var parser = dashdash.createParser({
        options: manta.DEFAULT_CLI_OPTIONS.concat([
            {
                group: name + ' options'
            },
            {
                names: ['header', 'H'],
                type: 'arrayOfString',
                help: 'HTTP headers to include',
                helpArg: 'HEADER'
            },
            {
                names: ['quiet', 'q'],
                type: 'bool',
                help: 'disable the progress bar'
            },
            {
                names: ['progress'],
                type: 'bool',
                help: 'force the progress bar to draw, even when \
                       stderr redirected'
            },
            {
                names: ['output', 'o'],
                type: 'string',
                help: 'write output to <file> instead of stdout'
            },
            {
                names: ['remote-name', 'O'],
                type: 'bool',
                help: 'write output to a file using remote object name as \
                       filename'
            }
        ])
    });

    return (parser);
}


function ifError(err) {
    if (err) {
        console.error('mget: ' + err.toString());
        process.exit(1);
    }
}


function downloadOne(dlo, done) {
    assert.object(dlo, 'dlo');
    assert.bool(dlo.dlo_progress, 'dlo.dlo_progress');
    assert.bool(dlo.dlo_devtty, 'dlo.dlo_devtty');
    assert.string(dlo.dlo_path, 'dlo.dlo_path');
    assert.object(dlo.dlo_client, 'dlo.dlo_client');
    assert.object(dlo.dlo_output, 'dlo.dlo_output');
    assert.func(done, 'done');

    dlo.dlo_client.get(dlo.dlo_path, function (err, stream, res) {
        if (err) {
            done(err);
            return;
        }

        var bar;
        var src = stream;
        if (dlo.dlo_progress) {
            var baropts = {
                filename: dlo.dlo_path,
                devtty: dlo.dlo_devtty
            };
            var clen = parseInt(res.headers['content-length'], 10);
            if (clen >= 0) {
                baropts.size = clen;
            } else {
                baropts.nosize = true;
            }
            bar = new progbar.ProgressBar(baropts);

            /*
             * We insert the progress bar stream between the response from
             * Manta and the local destination.  Note that we _do_ propagate
             * the "end" event here (see below), as that is what directs the
             * progress bar to finish drawing and clean up.
             */
            src = stream.pipe(bar.stream());
        }

        /*
         * The default behaviour of Stream#pipe() is to propagate the "end"
         * event automatically from source to destination stream.  As we are
         * potentially concatenating several response streams into one
         * target location, we need to disable this behaviour.  We then call
         * Stream#end() manually once all streams are complete.
         */
        src.pipe(dlo.dlo_output, { end: false });

        src.on('end', function () {
            done();
        });
    });
}


/**
 * Handle command-specific options parsing and checking.
 *
 * @param {Object} opts: Required. A parsed options object.
 * @param {Object} parser: Required. A dashdash option parser.
 * @returns {Object} A possibly mutated version of the `opts` input parameter.
 */
function parseCmdOptions(opts, parser) {
    if (opts.remote_name) {
        if (opts.paths.length !== 1) {
            manta.cli_usage(parser, '--remote-name only works with ' +
                            'a single object path', 'path...');
        } else {
            opts.output = path.posix.basename(opts.paths[0]);
        }
    }

    return (opts);
}


(function main() {
    var name = path.basename(process.argv[1]);
    var log = bunyan.createLogger({
        name: name,
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr
    });
    var parser = optionsParser(name);
    var parseArgs = {
        name: name,
        parser: parser,
        argTypes: ['mpath'],
        parseCmdOptions: parseCmdOptions,
        log: log
    };
    var opts = manta.parseOptions(parseArgs);
    var client = manta.createBinClient(opts);
    var drawProgressBar = true;

    var downloadAll = function (output, closeOutput) {
        assert.object(output, 'output');
        assert.bool(closeOutput, 'closeOutput');

        vasync.forEachPipeline({
            inputs: opts.paths,
            func: function (p, next) {
                downloadOne({
                    dlo_client: client,
                    dlo_progress: opts.progress || drawProgressBar,
                    dlo_devtty: opts.progress || false,
                    dlo_path: p,
                    dlo_output: output
                }, next);
            }
        }, function (err) {
            ifError(err);

            if (closeOutput) {
                output.end();
            }
            client.close();
        });
    };

    if (opts.quiet || !Boolean(process.stderr.isTTY))
        drawProgressBar = false;

    if (opts.output) {
        var file = fs.createWriteStream(opts.output);
        file.on('open', function () {
            downloadAll(file, true);
        });
    } else {
        /*
         * If no output file was selected, fall back to stdout.  Note
         * that Node does not allow the consumer to call Stream#end()
         * on the stdout stream.
         */
        if (process.stdout.isTTY) {
            /*
             * If we're outputting to a TTY, then we don't want to draw the
             * progress bar as it will likely clobber the output.
             */
            drawProgressBar = false;
        }
        downloadAll(process.stdout, false);
    }
})();
