#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2016 Joyent, Inc.
 */

var http = require('http');
var https = require('https');
var path = require('path');
var url = require('url');

var assert = require('assert-plus');
var bunyan = require('bunyan');
var dashdash = require('dashdash');
var vasync = require('vasync');

var manta = require('../lib');



///--- Globals

var NAME = path.basename(process.argv[1]);
var LOG = bunyan.createLogger({
    name: NAME,
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stderr
});

var OPTIONS_PARSER = dashdash.createParser({
    options: manta.DEFAULT_CLI_OPTIONS.concat([
        {
            group: NAME + ' options'
        },
        {
            names: ['limit', 'l'],
            type: 'positiveInteger',
            help: 'limit the number of results returned',
            helpArg: 'LIMIT'
        },
        {
            names: ['name', 'n'],
            type: 'string',
            help: 'only list objects that match /name/',
            helpArg: 'NAME'
        },
        {
            names: ['parallel', 'p'],
            type: 'positiveInteger',
            help: 'limit concurrent operations (default 50)',
            'default': 50,
            helpArg: 'NUM'
        },
        {
            names: ['size', 's'],
            type: 'positiveInteger',
            help: 'only list objects greater than <size> bytes',
            helpArg: 'SIZE'
        },
        {
            names: ['type', 't'],
            type: 'string',
            help: 'only return names of type <type> d=directory, o=object',
            helpArg: 'd|o'
        },
        {
            names: ['mindepth'],
            type: 'positiveInteger',
            help: 'only return items with at least this depth',
            helpArg: 'DEPTH'
        },
        {
            names: ['maxdepth'],
            type: 'positiveInteger',
            help: 'only return items less than this depth',
            helpArg: 'DEPTH'
        },
        {
            names: ['json', 'j'],
            type: 'bool',
            help: 'Output a newline-separated JSON stream of find results.'
        }
    ])
});
var TOTAL_ENTRIES = 0;



///--- Functions

function printError(epath, err) {
    console.error('mfind: in ' + epath + ': ' +
                  (process.env.DEBUG === '1' ? err.stack : err.toString()));
}


function parseOptions() {
    var opts;

    try {
        opts = OPTIONS_PARSER.parse(process.argv);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, '[PATH...]');
    }

    manta.cli_logger(opts, LOG);

    if (opts.help)
        manta.cli_usage(OPTIONS_PARSER, false, '[PATH...]');

    manta.cliVersionCheckPrintAndExit(opts);
    manta.cliCompletionCheckPrintAndExit(opts, OPTIONS_PARSER, NAME, ['mpath']);

    if (opts.name)
        opts.name = new RegExp(opts.name);

    if (!opts._args.length) {
        opts.paths = ['/' + opts.account + '/stor'];
    } else {
        opts.paths = opts._args;
    }

    try {
        manta.checkBinEnv(opts);
    } catch (e) {
        manta.cli_usage(OPTIONS_PARSER, e.message, '[PATH...]');
    }

    return (opts);
}


function printEntry(opts, obj) {
    if (opts.json) {
        console.log(JSON.stringify(obj));
    } else {
        console.log(obj.parent + (obj.name ? ('/' + obj.name) : ''));
    }
    ++TOTAL_ENTRIES;
    if (opts.limit && TOTAL_ENTRIES >= opts.limit) {
        process.exit(0);
    }
}



///--- Mainline

(function main() {
    var barrier = vasync.barrier();
    var options = parseOptions();
    var client = manta.createBinClient(options);
    var print = printEntry.bind(null, options);
    var lastError;

    barrier.once('drain', function () {
        client.close();
        if (lastError !== undefined) {
            process.exit(1);
        }
    });

    options.paths.forEach(function (p) {
        barrier.start(p);
        client.ftw(p, options, function (err, res) {
            if (err) {
                if (err.name === 'InvalidDirectoryError') {
                    // Hack this up as the object is the full path
                    err.info.name = '';
                    print(err.info);
                    barrier.done(p);
                    return;
                } else if (err.name === 'NotFoundError') {
                    if (err.path === undefined)
                        err.path = p;
                    printError(err.path, err);
                    lastError = err;
                    barrier.done(p);
                    return;
                } else {
                    var epath = p;
                    if (err.path !== undefined)
                        epath = err.path;
                    printError(epath, err);
                    process.exit(1);
                }
            }

            res.on('entry', print);
            res.on('end', barrier.done.bind(barrier, p));
        });
    });
})();
